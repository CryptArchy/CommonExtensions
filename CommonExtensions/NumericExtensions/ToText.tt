<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="Numbers.ttinclude" #>
using System;

namespace CommonExtensions.NumericExtensions
{
    public static partial class NumericEx
    {
		private static string[] Numbers = new[] { <#= MakeStringList(Numbers) #> };
		private static string[] NumbersByTen = new[] { <#= MakeStringList(NumbersByTen) #> };
		private static string[] PowersOfTen = new[] { <#= MakeStringList(PowersOfTen) #> };

<#	foreach (var ti in Numerics) { 
	var t = ti.Name;
	if(t != "Single" && t != "Double" && t != "Decimal") { #>
		public static string ToText(this <#=t#> value)
        {
            if (value == 0) return Numbers[<#=CastIdx(t)#>value];
<#		if(IsSigned(t)) { #>
			else if (value < 0) return "Negative " + ToText(Math.Abs(value));
<#		}#>

			string text = string.Empty;

			for (int i = PowersOfTen.Length-1; i >= 0; i--)
			{
<#			if (t == "Decimal") {#>
				decimal power;
				if (i == 0) power = 100;
				else power = (decimal)Math.Pow(10, i*3);
<#			} else {#>
				double power;
				if (i == 0) power = 100;
				else power = Math.Pow(10, i*3);
<#			}#>
		
				if (<#=t#>.MaxValue < power) continue;

				if ((value / (<#=t#>)power) > 0)
				{
					text += ToText(value / (<#=t#>)power) + " " + PowersOfTen[i] + " ";
					value %= (<#=t#>)power;
				}
			}

			if (value > 0) 
			{
				if (text != "") text += "and ";
		
				if (value < 20)
					text += Numbers[<#=CastIdx(t)#>value];
				else 
				{
					text += NumbersByTen[<#=CastIdx(t)#>value/10];
					if ((value %= 10) > 0) text += "-" + Numbers[<#=CastIdx(t)#>value];
				}
			}
			return text.Trim();
        }

		public static string ToOrdinalText(this <#=t#> value)
		{
			string text = ToText(value);
			if(text.EndsWith("One"))
				return text.Substring(0, text.Length-3) + "First";
			else if(text.EndsWith("Two"))
				return text.Substring(0, text.Length-3) + "Second";
			else if(text.EndsWith("Three"))
				return text.Substring(0, text.Length-5) + "Third";
			else if(text.EndsWith("ve"))
				return text.Substring(0, text.Length-2) + "fth";
			else if(text.EndsWith("e"))
				return text.Substring(0, text.Length-1) + "th";
			else if(text.EndsWith("y"))
				return text.Substring(0, text.Length-1) + "ieth";
			else if(text.EndsWith("t"))
				return text + "h";
			else
				return text + "th";
		}
		
		public static string ToOrdinal(this <#=t#> value)
        { 
            switch (value % 100)
            {
                case 11:
                case 12:
                case 13:
                    return value.ToString() + "th";
            }

            switch (value % 10)
            {
                case 1:
                    return value.ToString() + "st";
                case 2:
                    return value.ToString() + "nd";
                case 3:
                    return value.ToString() + "rd";
                default:
                    return value.ToString() + "th";
            }
        }
<#		}
	}#>
    }
}

<#+
	string CastIdx(string type) {
		if(IsIntegral(type)) 
			return string.Empty;
		else 
			return "(int)";
    }

	string MakeStringList(string[] strings) {
		string result = string.Empty;
		int i = 0;
		while (true) {
			result += "\"" + strings[i] + "\"";
			if (i < strings.Length - 1) {
				result += ", ";
				i++;
            } else {
				break;
            }
        }
		return result;
    }
#>